version: 2.1

executors:
  docker-executor:
    docker:
      - image: docker:stable-git
  build-executor:
    docker:
      - image: opennms/maven:17.0.6.0.10-3.8.8-b10456
  antora-executor:
    docker:
      - image: opennms/antora:3.1.7-b10461
  go-executor:
    docker:
      - image: circleci/golang
  simple-executor:
    docker:
      - image: cimg/base:current

commands:
  dockerhub-login:
    description: "Connect to DockerHub"
    steps:
      - run:
          name: Login to DockerHub
          command: |
            docker login -u ${DOCKERHUB_LOGIN} -p ${DOCKERHUB_PASS}

workflows:
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore: gh-pages
      - generate-docs:
          requires:
            - build
      - package:
          requires:
            - generate-docs
      - oci-image:
          requires:
            - package
      - smoke-tests:
          requires:
            - oci-image
      - publish-github:
          context:
            - "github-releases"
          filters:
            branches:
              only:
                - /^release-.*/
          requires:
            - smoke-tests
      - publish-dockerhub:
          context:
            - "docker-publish-account"
          filters:
            branches:
              only:
                - /^release-.*/
          requires:
            - smoke-tests
      - publish-javadoc:
          context:
            - "github-releases"
          filters:
            branches:
              only:
                - master
          requires:
            - smoke-tests

jobs:
  build:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          key: pris-repository-{{ checksum "pom.xml" }}
      - run:
          name: Generate version number for this build
          command: |
            BRANCH_TAG="$(echo "${CIRCLE_BRANCH/release-/}" | tr '[:upper:]' '[:lower:]')"
            VERSION="$(echo "${BRANCH_TAG}" | sed -e 's,/,-,g')-b${CIRCLE_BUILD_NUM}"
            echo "export VERSION=${VERSION}" >> ${BASH_ENV}
      - run:
          name: Compile and run tests
          command: |
            make compile
      - save_cache:
          key: pris-repository-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
      - run:
          name: Persist version number
          command: |
            echo ${VERSION} > version.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  generate-docs:
    executor: antora-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Validate Xrefs in docs
          command: |
            NODE_PATH="$(npm -g root)" antora --generator @antora/xref-validator antora-playbook-local.yml
      - run:
          name: Generate documentation
          command: |
            make docs
      - persist_to_workspace:
          root: ~/
          paths:
            - project
      - store_artifacts:
          path: project/build/site.zip

  package:
    executor: build-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Package into tar.gz and zip format
          command: |
            make package
      - store_artifacts:
          path: opennms-pris-dist/target/opennms-pris-release-archive.tar.gz
      - persist_to_workspace:
          root: ~/
          paths: project/opennms-pris-dist/target

  oci-image:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker Container Image
          command: |
            cp opennms-pris-dist/target/opennms-pris-release-archive.tar.gz docker/deploy/opennms-pris-release-archive.tar.gz
            cd docker
            echo "docker build --build-arg OPENNMS_PRIS_VERSION=$(cat ../version.txt) -t pris:$(cat ../version.txt) ."
            docker build --build-arg OPENNMS_PRIS_VERSION=$(cat ../version.txt) -t pris:$(cat ../version.txt) .
      - run:
          name: Persist Docker Container Image
          command: |
            docker image save pris:$(cat version.txt) -o pris-docker-image
      - store_artifacts:
          path: pris-docker-image
      - persist_to_workspace:
          root: ~/
          paths:
            - project/pris-docker-image

  smoke-tests:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Load PRIS Docker Container Image
          command: |
            docker image load -i pris-docker-image
      - run:
          name: Run PRIS Docker Container Image and keep Container ID
          command: |
            echo "export PRIS_CONTAINER_ID=$(docker run --rm --detach --name pris_$(cat version.txt) pris:$(cat version.txt))" >> ${BASH_ENV}
            sleep 3
      - run:
          name: Smoke test against documentation
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -L -f http://localhost:8000/ | grep "location=\"pris/.*/index.html\""
      - run:
          name: Smoke test against example requisition named MyRouter
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -f http://localhost:8000/requisitions/myRouter > myRouter.xml
      - run:
          name: Smoke test against example requisition named MyServer
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -f http://localhost:8000/requisitions/myServer > myServer.xml
      - store_artifacts:
          path: myRouter.xml
      - store_artifacts:
          path: myServer.xml
      - run:
          name: Tear down smoke test environment
          command: |
            source ${BASH_ENV}
            docker stop ${PRIS_CONTAINER_ID}
            docker rmi pris:$(cat version.txt)

  publish-dockerhub:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - dockerhub-login
      - run:
          name: Set DockerHub project user and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i pris-docker-image
      - run:
          name: Tag Docker Container Images and upload to DockerHub
          command: |
            source ${BASH_ENV}
            docker tag pris:$(cat version.txt) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest
            docker tag pris:$(cat version.txt) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.txt)
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.txt)

  publish-github:
      executor: go-executor
      steps:
        - attach_workspace:
            at: ~/
        - run:
            name: Install ghr tool to create GitHub releases and upload artifacts
            command: |
              go get -u github.com/tcnksm/ghr
        - run:
            name: Collect artifacts and publish archives to GitHub
            command: |
              mkdir github-latest
              export GITHUB_TOKEN="${GH_TOKEN}"
              cp opennms-pris-dist/target/opennms-pris-release-archive.tar.gz github-latest/opennms-pris-release-$(cat version.txt).tar.gz
              cp opennms-pris-dist/target/opennms-pris-release-archive.zip github-latest/opennms-pris-release-$(cat version.txt).zip
              ghr -r ${CIRCLE_PROJECT_REPONAME} $(cat version.txt) github-latest

  publish-javadoc:
      executor: simple-executor
      steps:
        - attach_workspace:
            at: ~/
        - add_ssh_keys:
            fingerprints:
              - "80:24:47:19:df:7b:f3:bf:8a:4d:45:c1:89:88:29:4c"
        - run:
            name: clone gh-pages branch
            command: |
              cd ~/project
              install -d -m 700 ~/.ssh
              curl -L https://api.github.com/meta | jq -r '.ssh_keys | .[]' | sed -e 's/^/github.com /' >> ~/.ssh/known_hosts
              git clone --filter=tree:0 --branch gh-pages git@github.com:OpenNMS/opennms-provisioning-integration-server gh-pages
        - run:
            name: publish updated javadocs
            command: |
              cd ~/project/gh-pages
              rm -rf *
              unzip ../target/*-javadoc.jar
              git add -A .
              git config user.email "cicd-system@opennms.com"
              git config user.name "CI/CD System"
              git commit -m 'publish latest API docs'
        - run:
            name: push to gh-pages
            command: |
              cd ~/project/gh-pages
              git push --no-verify origin gh-pages:gh-pages
