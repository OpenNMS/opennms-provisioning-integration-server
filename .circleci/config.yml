version: 2.0

defaults: &defaults

  working_directory: /home/circleci/pris

  workspace_root: &workspace_root
    .

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

references:
  docker_container_config: &docker_container_config
    docker:
      - image: docker:17.11.0-ce-git

  java_container_config: &java_container_config
    docker:
      - image: circleci/openjdk:8-jdk

  hugo_container_config: &hugo_container_config
    docker:
      - image: opennms/hugo:latest

  go_container_config: &go_container_config
    docker:
      - image: circleci/golang

  dockerhub_login: &dockerhub_login
    run:
      name: DockerHub Login
      command: |
        docker login -u ${DOCKERHUB_LOGIN} -p ${DOCKERHUB_PASS}

jobs:
  compile_n_junit:
    <<: *defaults
    <<: *java_container_config

    steps:
      - checkout
      - restore_cache:
          key: pris-repository-{{ checksum "pom.xml" }}
      - run:
          name: Generate version number for this release
          command: |
            echo "export VERSION=$(git describe)-b${CIRCLE_BUILD_NUM}" >> ${BASH_ENV}
      - run:
          name: Set version number and ensure lower case
          command: |
            echo "Set version number for build to: ${VERSION}"
            bin/changeversion.sh -o BLEEDING -n ${VERSION}
      - run:
          name: Validate Maven project
          command: |
            mvn validate
      - run:
          name: Compile application
          command: |
            mvn compile
      - run:
          name: Run Unit tests
          command: |
            mvn verify
      - save_cache:
          key: pris-repository-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
      - run:
          name: Persist version number
          command: |
            echo ${VERSION} > version.txt
      - persist_to_workspace:
          root: *workspace_root
          paths: .

  build_docs:
    <<: *defaults
    <<: *hugo_container_config

    steps:
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Generate documentation
          command: |
            cd docs
            hugo -d ../public || true
      - persist_to_workspace:
          root: *workspace_root
          paths: public

  package:
    <<: *defaults
    <<: *java_container_config

    steps:
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Package into tar.gz and zip format
          command: |
            mvn package -DskipTests
      - persist_to_workspace:
          root: *workspace_root
          paths: opennms-pris-dist/target

  build_docker_image:
    <<: *defaults
    <<: *docker_container_config

    steps:
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Build Docker Container Image
          command: |
            cp opennms-pris-dist/target/opennms-pris-release-archive.tar.gz docker/deploy/opennms-pris-release-archive.tar.gz
            cd docker
            echo "docker build --build-arg OPENNMS_PRIS_VERSION=$(cat ../version.txt) -t pris:$(cat ../version.txt) ."
            docker build --build-arg OPENNMS_PRIS_VERSION=$(cat ../version.txt) -t pris:$(cat ../version.txt) .
      - run:
          name: Persist Docker Container Image
          command: |
            docker image save pris:$(cat version.txt) -o pris-docker-image
      - store_artifacts:
          path: pris-docker-image
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - pris-docker-image

  smoke_test:
    <<: *defaults
    <<: *docker_container_config

    steps:
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Load PRIS Docker Container Image
          command: |
            docker image load -i pris-docker-image
      - run:
          name: Run PRIS Docker Container Image and keep Container ID
          command: |
            echo "export PRIS_CONTAINER_ID=$(docker run --rm --detach --name pris_$(cat version.txt) pris:$(cat version.txt))" >> ${BASH_ENV}
            sleep 3
      - run:
          name: Smoke test against documentation
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -f http://localhost:8000 | grep "PRIS for OpenNMS"
      - run:
          name: Smoke test against example requisition named MyRouter
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -f http://localhost:8000/requisitions/myRouter > myRouter.xml
      - run:
          name: Smoke test against example requisition named MyServer
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -f http://localhost:8000/requisitions/myServer > myServer.xml
      - store_artifacts:
          path: myRouter.xml
      - store_artifacts:
          path: myServer.xml
      - run:
          name: Tear down smoke test environment
          command: |
            source ${BASH_ENV}
            docker stop ${PRIS_CONTAINER_ID}
            docker rmi pris:$(cat version.txt)

  publish_dockerhub:
    <<: *defaults
    <<: *docker_container_config

    steps:
      - setup_remote_docker
      - *attach_workspace
      - *dockerhub_login
      - run:
          name: Set DockerHub project user and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i pris-docker-image
      - run:
          name: Tag Docker Container Images and upload to DockerHub
          command: |
            source ${BASH_ENV}
            case "${CIRCLE_BRANCH}" in
              master)
                docker tag pris:$(cat version.txt) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding
                docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding
                ;;
              release*)
                docker tag pris:$(cat version.txt) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest
                docker tag pris:$(cat version.txt) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.txt)
                docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest
                docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.txt)
                ;;
              *)
                echo "This is not a branch build which needs to be published"
                ;;
            esac

  publish_github:
      <<: *defaults
      <<: *go_container_config

      steps:
        - *attach_workspace
        - run:
            name: Install ghr tool to create GitHub releases and upload artifacts
            command: |
              go get -u github.com/tcnksm/ghr
        - run:
            name: Collect artifacts and publish archives to GitHub
            command: |
              case "${CIRCLE_BRANCH}" in
                master)
                  mkdir github-bleeding
                  cp opennms-pris-dist/target/opennms-pris-release-archive.tar.gz github-bleeding/opennms-pris-bleeding-$(cat version.txt).tar.gz
                  cp opennms-pris-dist/target/opennms-pris-release-archive.zip github-bleeding/opennms-pris-bleeding-$(cat version.txt).zip
                  ghr -prerelease -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} bleeding-$(cat version.txt) github-bleeding
                  ;;
                release*)
                  mkdir github-latest
                  cp opennms-pris-dist/target/opennms-pris-release-archive.tar.gz github-latest/opennms-pris-release-$(cat version.txt).tar.gz
                  cp opennms-pris-dist/target/opennms-pris-release-archive.zip github-latest/opennms-pris-release-$(cat version.txt).zip
                  ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} $(cat version.txt) github-latest
                  ;;
                *)
                  echo "This is not a branch build which needs to be published"
                  ;;
              esac

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - compile_n_junit
      - build_docs:
          requires:
            - compile_n_junit
      - package:
          requires:
            - build_docs
      - build_docker_image:
          requires:
            - package
      - smoke_test:
          requires:
            - build_docker_image
      - publish_github:
          filters:
            branches:
              only:
                - master
                - /release-.*/
          requires:
            - smoke_test
      - publish_dockerhub:
          filters:
            branches:
              only:
                - master
                - /release-.*/
          requires:
            - smoke_test
            - build_docker_image
