version: 2.0

defaults: &defaults

  working_directory: /home/circleci/pris

  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  compile_n_junit:
    <<: *defaults
    docker:
      - image: circleci/openjdk:8-jdk

    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
          key: pris-repository-{{ checksum "pom.xml" }}
      - run:
          name: Generate version number for this release
          command: |
            echo "export VERSION=$(git describe)-b${CIRCLE_BUILD_NUM}" >> ${BASH_ENV}
      - run:
          name: Set version number
          command: |
            echo "Set version number for build to: ${VERSION}"
            bin/changeversion.sh -o NEXT-MAJOR -n ${VERSION}
      - run:
          name: Validate Maven project
          command: |
            mvn validate
      - run:
          name: Compile application
          command: |
            mvn compile
      - run:
          name: Run Unit tests
          command: |
            mvn test
      - run:
          name: Package into distributable format
          command: |
            mvn package -DskipTests
      - save_cache:
          paths:
            - ~/.m2
          key: pris-repository-{{ checksum "pom.xml" }}
      - store_artifacts:
          path: opennms-pris-dist/target/pris-release-archive.tar.gz
      - store_artifacts:
          path: opennms-pris-dist/target/pris-release-archive.zip
      - run:
          name: Persist PRIS release archive in workspace
          command: |
            cp opennms-pris-dist/target/pris-release-archive.tar.gz /tmp/workspace
            cp opennms-pris-dist/target/pris-release-archive.zip /tmp/workspace
      - run:
          name: Persist version number
          command: |
            echo ${VERSION} > /tmp/workspace/version.txt
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - pris-release-archive.tar.gz
            - pris-release-archive.zip
            - version.txt

  build_docker_image:
    <<: *defaults
    docker:
      - image: docker:17.11.0-ce-git

    steps:
      - setup_remote_docker
      - *attach_workspace
      - checkout
      - run:
          name: Build Docker Container Image
          command: |
            cd Docker
            cp /tmp/workspace/pris-release-archive.tar.gz deploy/pris-release-archive.tar.gz
            docker build --build-arg OPENNMS_PRIS_VERSION=$(cat /tmp/workspace/version.txt) -t opennms/pris:$(cat /tmp/workspace/version.txt) .
      - run:
          name: Persist Docker Container Image
          command: |
            docker image save opennms/pris:$(cat /tmp/workspace/version.txt) -o /tmp/workspace/pris-docker-image
      - store_artifacts:
          path: /tmp/workspace/pris-docker-image
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - pris-docker-image

  smoke_test:
    <<: *defaults
    docker:
      - image: docker:17.11.0-ce

    steps:
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Load PRIS Docker Container Image
          command: |
            docker image load -i /tmp/workspace/pris-docker-image
      - run:
          name: Run PRIS Docker Container Image and keep Container ID
          command: |
            echo "export PRIS_CONTAINER_ID=$(docker run --rm --detach --name pris_$(cat /tmp/workspace/version.txt) opennms/pris:$(cat /tmp/workspace/version.txt))" >> ${BASH_ENV}
            sleep 3
      - run:
          name: Smoke test against application landing page with redirect to documentation
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -L -f -I http://localhost:8000
      - run:
          name: Smoke test against example requisition named MyRouter
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -f http://localhost:8000/requisitions/myRouter > myRouter.xml
      - run:
          name: Smoke test against example requisition named MyServer
          command: |
            source ${BASH_ENV}
            docker exec ${PRIS_CONTAINER_ID} curl -f http://localhost:8000/requisitions/myServer > myServer.xml
      - store_artifacts:
          path: myRouter.xml
      - store_artifacts:
          path: myServer.xml
      - run:
          name: Tear down smoke test environment
          command: |
            source ${BASH_ENV}
            docker stop ${PRIS_CONTAINER_ID}
            docker rmi opennms/pris:$(cat /tmp/workspace/version.txt)

  publish_latest_2_DockerHub:
      <<: *defaults
      docker:
        - image: docker:17.11.0-ce

      steps:
        - setup_remote_docker
        - *attach_workspace
        - run:
            name: DockerHub Login
            command: |
              docker login -u ${dockerhub_login} -p ${dockerhub_pass}
        - run:
            name: Load Docker Container Image file
            command: |
              docker image load -i /tmp/workspace/pris-docker-image
        - run:
            name: Tag Docker Container Images as latest release
            command: |
              docker tag opennms/pris:$(cat /tmp/workspace/version.txt) opennms/pris:latest
        - run:
            name: Publish latest release Docker Container Image to DockerHub
            command: |
              docker push opennms/pris:latest
              docker push opennms/pris:$(cat /tmp/workspace/version.txt)

  publish_bleeding_2_DockerHub:
      <<: *defaults
      docker:
        - image: docker:17.11.0-ce

      steps:
        - setup_remote_docker
        - *attach_workspace
        - run:
            name: DockerHub Login
            command: |
              docker login -u ${dockerhub_login} -p ${dockerhub_pass}
        - run:
            name: Load Docker Container Image file
            command: |
              docker image load -i /tmp/workspace/pris-docker-image
        - run:
            name: Tag Docker Container Images as bleeding edge
            command: |
              docker tag opennms/pris:$(cat /tmp/workspace/version.txt) opennms/pris:bleeding
        - run:
            name: Publish bleeding edge Docker Container Image to DockerHub
            command: |
              docker push opennms/pris:bleeding

  publish_latest_2_GitHub:
      <<: *defaults
      docker:
        - image: circleci/golang

      steps:
        - *attach_workspace
        - run:
            name: Install ghr tool to create GitHub releases and upload artifacts
            command: |
              go get -u github.com/tcnksm/ghr
        - run:
            name: Collect artifacts to publish latest release on GitHub
            command: |
              mkdir github-latest
              cp /tmp/workspace/pris-release-archive.tar.gz github-latest/pris-release-$(cat /tmp/workspace/version.txt).tar.gz
              cp /tmp/workspace/pris-release-archive.zip github-latest/pris-release-$(cat /tmp/workspace/version.txt).zip
        - run:
            name: Publish latest archives to GitHub
            command: |
              ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} $(cat /tmp/workspace/version.txt) github-latest

  publish_bleeding_2_GitHub:
      <<: *defaults
      docker:
        - image: circleci/golang

      steps:
        - *attach_workspace
        - run:
            name: Install ghr tool to create GitHub releases and upload artifacts
            command: |
              go get -u github.com/tcnksm/ghr
        - run:
            name: Collect artifacts to publish bleeding release on GitHub
            command: |
              mkdir github-bleeding
              cp /tmp/workspace/pris-release-archive.tar.gz github-bleeding/pris-bleeding-$(cat /tmp/workspace/version.txt)-.tar.gz
              cp /tmp/workspace/pris-release-archive.zip github-bleeding/pris-bleeding-$(cat /tmp/workspace/version.txt).zip
        - run:
            name: Publish bleeding archives to GitHub
            command: |
              ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} bleeding-$(cat /tmp/workspace/version.txt) github-bleeding
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - compile_n_junit
      - publish_latest_2_GitHub:
          requires:
            - compile_n_junit
      - publish_bleeding_2_GitHub:
          requires:
            - compile_n_junit

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - compile_n_junit
      - build_docker_image:
          requires:
            - compile_n_junit
      - smoke_test:
          requires:
            - build_docker_image
      - publish_latest_2_GitHub:
          filters:
            branches:
              only:
                - /release-.*/
          requires:
            - smoke_test
      - publish_bleeding_2_GitHub:
          filters:
            branches:
              only:
                - master
          requires:
            - smoke_test
      - publish_latest_2_DockerHub:
          filters:
            branches:
              only:
                - /release-.*/
          requires:
            - smoke_test
            - build_docker_image
      - publish_bleeding_2_DockerHub:
          filters:
            branches:
              only:
                - master
          requires:
            - smoke_test
            - build_docker_image
